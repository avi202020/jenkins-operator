// Code generated by go-bindata. DO NOT EDIT. @generated
// sources:
// crd/jenkins_v1alpha2_jenkinsinstance.yaml
package crddata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _jenkins_v1alpha2_jenkinsinstanceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\x4d\x73\x1b\x37\x0f\xbe\xeb\x57\x60\x9c\x43\x92\x89\x25\xbd\x4e\x2e\xef\xe8\x96\x71\x7a\x70\x3b\xcd\x64\xe2\x4c\x7a\xe8\xf4\x00\x91\x58\x09\x31\x97\x64\x49\xec\x3a\x6a\xa7\xff\xbd\x43\x72\x57\xd6\xc7\xae\xa4\xa4\xd9\x8b\x2d\x10\x9f\x0f\x40\x00\x44\xcf\x9f\x29\x44\x76\x76\x01\xe8\x99\xbe\x0a\xd9\xf4\x2b\xce\x1e\xfe\x1f\x67\xec\xe6\xed\xcd\x92\x04\x6f\x26\x0f\x6c\xf5\x02\x6e\x9b\x28\xae\xfe\x48\xd1\x35\x41\xd1\x3b\xaa\xd8\xb2\xb0\xb3\x93\x9a\x04\x35\x0a\x2e\x26\x00\x2a\x10\x26\xe2\x27\xae\x29\x0a\xd6\x7e\x01\xb6\x31\x66\x02\x60\x70\x49\x26\x26\x1e\x00\xe5\xac\x04\x67\x0c\x85\xa9\x38\x67\x7a\x83\x0b\xb8\xba\x99\xfd\xef\x6a\x02\x60\xb1\xa6\x05\x7c\x21\xfb\xc0\x36\xb2\x8d\x82\x56\x51\x9c\x75\x84\xfe\xaf\xf3\x14\x50\x5c\x98\xd5\x98\xfe\xb2\x9e\xad\x58\xd6\xcd\x72\xa6\x5c\x3d\x89\x9e\x54\xb2\xb6\x0a\xae\xf1\x5b\x5d\x17\x89\x16\xfb\x9d\xaf\x25\xf8\x9f\x8b\xd8\x5d\xe7\x4a\x3e\xf1\xa6\x09\x68\x8e\xdd\x9c\x00\x44\xe5\x3c\x2d\xe0\x7d\x52\xe3\x51\x91\x4e\xb4\x66\x19\x3a\xf0\x3a\xd5\x51\x50\x9a\xb8\x80\xbf\xff\x99\x00\xb4\x68\x58\x67\xec\xca\xa1\xf3\x64\xdf\x7e\xb8\xfb\xfc\xe6\x5e\xad\xa9\xc6\x42\x04\xf0\x21\xb9\x2e\xdc\xeb\x48\xdf\x4e\x22\xb7\x34\x00\x4d\x51\x05\xf6\x59\x23\x3c\x4f\xaa\x0a\x0f\xe8\x94\x3a\x8a\x20\x6b\x82\xb6\xd0\x48\x43\xcc\x66\xc0\x55\x20\x6b\x8e\x10\xc8\x07\x8a\x64\x25\xbb\xb4\xa3\x16\x12\x0b\x5a\x70\xcb\x2f\xa4\x64\x06\xf7\x14\x92\x12\x88\x6b\xd7\x18\x9d\x52\xdb\x52\x10\x08\xa4\xdc\xca\xf2\x5f\x5b\xcd\x11\xc4\x65\x93\x06\x85\xa2\xec\x69\x64\x2b\x14\x2c\x9a\x04\x42\x43\xd7\x80\x56\x43\x8d\x1b\x08\x94\x6c\x40\x63\x77\xb4\x65\x96\x38\x83\x5f\x5d\x20\x60\x5b\xb9\x05\xac\x45\x7c\x5c\xcc\xe7\x2b\x96\xbe\x74\x95\xab\xeb\xc6\xb2\x6c\xe6\xb9\xd6\x78\xd9\x88\x0b\x71\xae\xa9\x25\x33\x47\xcf\xd3\xec\xa7\x95\x5c\xee\xb5\x7e\xb6\xcd\xcc\xf3\x1d\xc7\x64\x93\x92\x18\x25\xb0\x5d\x6d\xc9\xb9\x1e\x46\x61\xfe\x85\xad\x06\x8e\x80\x9d\x58\x71\xf7\x09\xcd\x44\x4a\x20\x7c\xfc\xe9\xfe\x13\xf4\x46\x33\xe2\xfb\x10\x67\x70\x9f\xc4\xe2\x13\xce\x09\x17\xb6\x15\x85\x92\xa7\x2a\xb8\x3a\x6b\x24\xab\xbd\x63\x2b\xf9\x87\x32\x4c\x76\x1f\xe3\xd8\x2c\x6b\x96\x94\xd8\x3f\x1b\x8a\x92\xd2\x31\x83\x5b\xb4\xd6\x09\x2c\x09\x1a\xaf\x51\x48\xcf\xe0\xce\xc2\x2d\xd6\x64\x6e\x31\xd2\x8f\x46\x39\x01\x1a\xa7\x09\xc1\xf3\x38\xef\x76\x95\x7d\xc6\x02\xce\x96\xdc\x5f\xf4\xfe\x1b\xba\x21\xf9\x96\xe8\x9a\x6d\x24\x15\x48\xf6\x0f\x46\x1c\xc8\x32\x09\x9e\x7c\x03\xe2\xa1\xcc\x5e\xde\xbb\xf6\x00\x9a\xbc\x71\x9b\x9a\xac\xec\x8a\x0e\x5a\x3b\x88\x22\x7d\x0a\xa3\x52\xce\x56\xbc\x3a\x69\xac\xb0\x34\x21\x2b\x9f\x62\x9c\x2a\xa7\x29\xc3\x70\x20\x35\x86\x04\x94\x16\x5c\xf1\xaa\x46\x7f\x7c\x74\x60\xce\x85\xec\x58\x27\xf1\x22\xbe\x84\xda\x35\x56\x48\x97\xda\xc3\xdc\x2c\x75\x77\x0c\x35\xfa\x01\x85\xa3\x00\x3f\xb9\x52\x0e\xcf\x7a\xb3\xe3\x0a\x60\x84\xba\x31\xc2\x53\xc3\x96\x60\x83\xb5\x19\x33\x71\xd2\x83\x93\xf9\x18\x2e\x98\x4b\xf2\x91\x05\x33\x38\x97\x56\x1b\xd9\xf6\xa4\xa1\x77\xac\xd2\x3f\x18\x36\xa9\x07\x93\x6d\x39\x38\x9b\x8b\xad\xc5\xc0\xb8\x34\xd4\x75\xc7\x4b\x03\x5c\x05\xe7\xda\xcd\x05\x21\x16\xc6\xfd\x48\xbf\x27\x42\xae\x71\x45\x27\x2d\xfd\xb6\x46\xc9\xfb\x01\xb2\xa5\x50\x04\xd2\xe4\x68\x22\x41\xe5\x42\x2a\x37\x7a\xec\x47\x2e\xf0\xee\x3c\x7e\xfa\x3c\x4a\x1a\x28\x0b\x98\xbd\x5a\xcc\x5e\x5d\xea\x9c\x37\xcd\x8a\xcf\x5c\xf4\xb7\x21\x60\x46\xbf\x63\x4e\xae\x2d\xa9\xf8\x61\x4c\x9e\xf3\x7b\xf1\x0a\xd5\x03\x97\xef\xd4\xc5\x04\x60\x3d\x44\x3d\x70\xa4\xd8\x07\x3e\xb4\x78\x26\xc6\xf2\xb5\xc7\xdb\xc2\x69\x33\x9d\x40\xa7\xf1\x1a\x2a\x67\x8c\x7b\x2c\x2b\x44\xe5\x42\x8d\x02\x28\xbb\x13\xa2\x5b\xa5\xe6\x5d\xa2\x14\xcf\xb5\x53\x0f\x14\x9e\x15\x85\xd3\x4e\xe1\xb4\x08\x7f\x7b\x0c\x69\x8a\x71\xa0\x01\xa4\xa6\x43\x98\x4c\xfb\x08\x8e\x4e\x46\xef\x46\x7f\x84\x29\xe3\xfb\x93\x94\x42\xcb\xea\x74\x19\xf7\x03\xa1\xe3\x05\xe7\x87\x26\xc1\xa9\x3a\x38\x31\x7a\xce\x5a\x1b\x9f\x3d\x67\x42\xee\x36\xef\x6f\xb5\x37\xd0\x02\xe0\x5c\x06\xad\xd3\xe4\x5d\x38\xea\x3b\x47\xc6\xee\xaa\xac\x28\x6d\x55\x49\x06\x92\xd0\x75\xee\x07\x79\x01\xda\xd2\x4a\xef\x1b\xd0\x56\x6a\x6c\x91\xb6\xcc\x37\xaf\x47\xdd\x4c\x3b\xe8\x8a\xc2\xd1\x79\x17\x63\x66\xba\x14\x97\xbe\x2d\x6d\x01\x4a\xd2\x3f\x68\x28\x75\x2a\x51\xa9\x34\x85\x4f\x16\xe1\x7d\x5f\x0e\x85\x37\xa7\x29\x37\xd1\xbe\x7d\x8a\x83\xd0\x58\x68\xac\x3e\x0a\x7c\xd4\xb5\x28\x2e\x9c\x6b\xe2\xdb\xfa\x28\xbc\xdf\x51\xfd\x5f\xdc\x32\xfa\x56\x9d\x45\x3c\xbd\xb0\x72\x3b\x0e\x34\xa5\xaf\x1c\xf3\x82\xfd\xc2\x05\xb0\x4e\x5e\xc2\x87\xcf\xb7\x25\x5e\xb7\x1c\xbf\x08\x23\xf5\xd9\x79\x70\xb8\x5d\x0e\x7a\x71\x57\x65\x53\xdc\x8f\x83\xfc\x0a\x26\x7d\x0d\x8f\x69\x9a\x71\x84\xb4\x78\x0f\x2c\x68\x70\x49\x03\x3a\x3a\x1a\xde\x82\xcb\x5b\xf2\xbf\xed\xc1\x7b\x41\x45\x92\xc6\x77\x43\xfe\xe2\x11\xba\xc6\x78\xba\x34\x92\x9f\x04\x5c\x6d\x6b\x30\xe6\x77\xcd\xd8\x24\x1f\xb1\x34\xd4\xfe\xa7\xc5\xfa\x38\x50\xfd\xd4\x83\xf6\x06\x8d\x5f\xe3\xeb\xc9\x13\x68\xa8\x14\x79\x21\xfd\xfe\xf0\xe1\x7f\x75\xb5\xf7\xd6\xcf\x3f\x95\xb3\x9a\x4b\x67\x86\xdf\xff\x98\x94\x3b\x41\xba\x7b\x5f\x17\xe2\xbf\x01\x00\x00\xff\xff\x1d\x4a\x8a\x61\x5d\x11\x00\x00")

func jenkins_v1alpha2_jenkinsinstanceYamlBytes() ([]byte, error) {
	return bindataRead(
		_jenkins_v1alpha2_jenkinsinstanceYaml,
		"jenkins_v1alpha2_jenkinsinstance.yaml",
	)
}

func jenkins_v1alpha2_jenkinsinstanceYaml() (*asset, error) {
	bytes, err := jenkins_v1alpha2_jenkinsinstanceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "jenkins_v1alpha2_jenkinsinstance.yaml", size: 0, mode: os.FileMode(511), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"jenkins_v1alpha2_jenkinsinstance.yaml": jenkins_v1alpha2_jenkinsinstanceYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"jenkins_v1alpha2_jenkinsinstance.yaml": &bintree{jenkins_v1alpha2_jenkinsinstanceYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

// Code generated by go-bindata. DO NOT EDIT. @generated
// sources:
// crd/jenkins_v1alpha1_jenkinsinstance.yaml
// crd/jenkins_v1alpha1_jenkinsjob.yaml
package crddata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _jenkins_v1alpha1_jenkinsinstanceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x56\x4f\x6f\xdb\x3e\x0c\xbd\xfb\x53\x08\xb9\x16\xf5\xef\x97\xf5\x32\xf8\x36\x6c\x97\xee\x50\x0c\xdb\xd0\x3b\x23\xb3\x0e\x1b\x99\xd4\x24\xda\x6b\xbe\xfd\x60\x3b\xce\x92\xf8\x4f\xdc\x62\x3b\xcd\x17\xc3\x94\x1e\xf9\xf8\x48\xc9\x04\x4f\x8f\x18\x22\x09\x67\x06\x3c\xe1\x8b\x22\x37\x5f\x31\xdd\xbd\x8f\x29\xc9\x7f\xf5\x7a\x83\x0a\xeb\x64\x47\x9c\x67\xe6\x63\x15\x55\xca\xaf\x18\xa5\x0a\x16\x3f\xe1\x13\x31\x29\x09\x27\x25\x2a\xe4\xa0\x90\x25\xc6\xd8\x80\xd0\x18\xbf\x53\x89\x51\xa1\xf4\x99\xe1\xca\xb9\xc4\x18\x07\x1b\x74\xb1\xd9\x63\x8c\x15\xd6\x20\xce\x61\xb8\x55\x11\xd7\x07\xcc\xcc\x6a\x9d\xfe\xbf\x4a\x8c\x61\x28\x31\x33\xcf\xc8\x3b\xe2\x48\x1c\x15\xd8\x62\x4c\x0f\x86\xfe\x2d\x1e\x03\xa8\x84\xb4\x84\xe6\x4d\x79\x5a\x90\x6e\xab\x4d\x6a\xa5\x4c\xa2\x47\xdb\x44\x2b\x82\x54\xfe\xe8\x6b\x11\xb4\x8b\x7f\xe0\xda\x25\xff\xb9\x83\xdd\x1f\xa8\xb4\x2b\xde\x55\x01\xdc\x90\x66\x62\x4c\xb4\xe2\x31\x33\x0f\x8d\x1b\x0f\x16\xf3\xc4\x98\x1a\x1c\xe5\xad\x38\x9d\x63\xf1\xc8\x1f\xbe\xdc\x3f\xde\x7d\xb3\x5b\x2c\xa1\x33\x1a\xe3\x43\xc3\x4d\xa9\x8f\xdf\x3c\x27\x95\x3a\xda\x8c\xd1\x7d\x13\x23\x6a\x20\x2e\x8e\xe6\x96\xee\xb5\x4d\xa7\x15\x3b\xdf\x28\x9b\x67\xb4\x7a\x34\xf7\x22\xf6\xcf\x18\xb9\x96\x60\x5e\x12\x63\x09\xe4\xce\xed\x13\xf1\x8f\x90\x88\x36\xa0\x2e\xc7\x30\x8b\xb6\x12\xc6\x71\xcc\x05\xfd\xb6\xd7\x20\xda\x2e\xcc\x00\x43\x8a\xe5\xc0\x38\x9d\xe4\x41\x92\x51\xca\x57\x88\x37\x4f\xc0\x1f\x15\x05\xcc\x87\xd0\xdb\x83\xd3\xc1\xc2\x64\x52\xfd\x12\x84\x00\xfb\xf3\x74\x03\xe6\xc8\x4a\xe0\x26\x24\x1a\x61\x87\x5c\x2f\x96\x13\x5f\xd0\x56\x2a\x61\xe0\xfd\x49\x42\x09\x9a\x19\x62\xbd\x7b\x37\xea\x8d\x58\xb1\xc0\x70\xb6\x56\x04\x91\x7a\xff\x0f\xd5\x87\x4a\x28\xf0\x32\x84\x07\x55\x0c\x9c\x99\xf4\x26\x4b\x6f\x96\x96\x8d\xb8\x08\x18\x07\x22\xcc\xc9\x33\x73\x80\xae\xe4\xd3\x92\xdc\x4e\x83\x26\x44\x8d\x18\x6a\xb2\x83\x84\xaf\xe2\xd4\xc5\xe9\x42\xce\x20\x27\x33\x70\x62\x4f\xee\xde\x05\xbe\x18\xf5\xa7\x84\x9d\x17\x47\x76\x3f\x8e\xda\x88\x38\x04\x3e\x5b\xf3\xae\x2a\x68\xa8\xee\x9b\x5a\xd9\x0a\x3f\x51\xf1\x86\x56\x36\x86\x46\xda\x78\x01\xac\x1e\xfe\x65\x16\x62\xdf\x70\x14\x26\x7a\xe3\x6f\xf5\x6f\x3b\x53\xbc\xb6\x0f\x59\x72\xf4\x12\x46\xdb\x70\xee\xc6\x33\xb3\xb7\xde\x49\xf6\xed\xa6\x3f\xd4\xe3\x07\x97\x60\xad\x54\xbc\xfc\xaf\x1a\x55\xc2\xd8\xa5\x34\x53\x87\x67\xd9\x44\x5f\xdb\x57\xcb\x79\xc0\x5d\x8e\x15\x57\x33\x9b\x5c\x1a\x9f\x5a\x14\xb4\x8a\x8b\xe7\x96\x57\x0e\x21\x7e\x0b\x71\x20\xd6\xc4\xee\xb1\x7f\xca\x6d\xe7\x61\x3e\x89\x0b\x53\x7f\x2e\x4d\xbd\x06\xe7\xb7\xb0\x4e\x7e\xe7\x08\xd6\xa2\x57\xcc\x1f\x2e\x67\xd6\xd5\xea\x6c\x4c\x6d\x3f\xad\x70\x4e\xdd\xf9\xe9\x06\xf3\x5f\x01\x00\x00\xff\xff\x37\x36\xe1\xf8\x05\x0c\x00\x00")

func jenkins_v1alpha1_jenkinsinstanceYamlBytes() ([]byte, error) {
	return bindataRead(
		_jenkins_v1alpha1_jenkinsinstanceYaml,
		"jenkins_v1alpha1_jenkinsinstance.yaml",
	)
}

func jenkins_v1alpha1_jenkinsinstanceYaml() (*asset, error) {
	bytes, err := jenkins_v1alpha1_jenkinsinstanceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "jenkins_v1alpha1_jenkinsinstance.yaml", size: 0, mode: os.FileMode(511), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jenkins_v1alpha1_jenkinsjobYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\x4f\x6f\xd4\x3e\x10\xbd\xe7\x53\x8c\xf6\xf8\x93\x36\x3f\x56\x5c\x50\x6e\x08\x2e\xf4\x50\x55\x50\xf5\x82\x8a\x34\x71\x86\xae\x77\x1d\x8f\xf1\x8c\x43\x8b\xfa\xe1\x91\x93\xcd\xd2\xa4\x69\x89\xc8\x21\xb1\xdf\xfc\x79\x2f\xf6\xcc\x60\xb0\x37\x14\xc5\xb2\xaf\x00\x83\xa5\x7b\x25\x9f\x77\x52\x1e\xdf\x49\x69\xf9\xff\x6e\x57\x93\xe2\xae\x38\x5a\xdf\x54\xf0\x21\x89\x72\xfb\x99\x84\x53\x34\xf4\x91\xbe\x5b\x6f\xd5\xb2\x2f\x5a\x52\x6c\x50\xb1\x2a\x00\x4c\x24\xcc\xe0\xb5\x6d\x49\x14\xdb\x50\x81\x4f\xce\x15\x00\x0e\x6b\x72\x92\x7d\x00\x0c\x7b\x8d\xec\x1c\xc5\xad\x32\xbb\x91\xb0\x82\xcd\xae\x7c\xb3\x29\x00\x3c\xb6\x54\xc1\x81\xfc\xd1\x7a\x39\x70\x2d\xe5\x69\x3d\x7e\x39\x50\x44\xe5\x58\xb6\x98\xbf\xb6\x29\xef\xac\xee\x53\x5d\x1a\x6e\x0b\x09\x64\x32\xd1\x5d\xe4\x14\xce\x69\x56\x85\x0e\xd4\x27\x99\xc3\x7f\x5f\x0c\x61\x17\x5c\xf7\x60\x70\x29\xa2\x9b\x88\x2b\x00\xc4\x70\xa0\x0a\x2e\x73\x70\x40\x43\x4d\x01\xd0\xa1\xb3\x4d\x7f\x1a\x43\x3a\x0e\xe4\xdf\x5f\x7d\xba\x79\xfb\xc5\xec\xa9\xc5\x01\x04\x08\x31\x2b\x52\x3b\xb2\xe6\xe7\xc9\xd5\x9c\x31\x00\x7d\xc8\x1c\xa2\xd1\xfa\xbb\x33\xdc\x8b\xfc\x9b\xd3\xd3\x2b\x9a\x3a\x72\x7d\x20\xa3\x67\x78\x3c\xba\xf1\x59\x12\xd7\xdf\xa0\x23\xf4\x29\x4c\xc1\x31\x67\xcd\x9c\xcd\xd3\x80\x48\x0d\x79\xb5\xe8\x64\x1e\x64\x95\xda\x67\xe0\xcb\xd4\xf3\x7c\x4b\x56\x80\x80\xaa\x14\x7d\x05\xdf\xbe\xe2\xf6\xd7\x6d\x7e\x6d\x6f\xff\xeb\xd7\x8b\xfe\x8b\xc7\xb6\x44\xd7\x3b\xbe\x4e\x99\x84\x62\x2e\xa3\x2b\x14\xf9\xc9\xb1\x79\x14\x32\x91\xf4\x9a\xee\xf5\x51\x28\x76\xd6\x10\x1a\xc3\xc9\xeb\x63\x87\xc9\xe9\x50\x7f\xc3\x1a\x43\x88\xec\x68\xd8\x28\x1f\xc9\xff\x8b\xdc\x81\x70\x59\xe6\xaa\xd0\x79\xb1\xcc\xc3\x67\x65\xb3\xc2\x38\x98\x30\x46\x7c\x98\x58\x4e\x7d\x64\xbd\x28\x7a\xf3\xec\x68\x5f\x54\x7b\xe0\xba\x91\x67\x97\xff\x9a\xfb\x7d\xbb\xd6\x7d\xb9\x35\x14\x35\xc9\x9a\xe6\x08\x7b\x94\xb5\x3f\x12\xe9\x47\xb2\x91\x26\x2d\xbc\x1d\x32\xbc\x2e\x68\x06\x75\xe3\x24\xef\x76\xe8\xc2\x1e\x77\xc5\x1f\xbd\x68\x0c\x05\xa5\xe6\x72\x3e\xda\x36\x9b\xc9\x48\xeb\xb7\x86\x7d\xd3\xcf\x75\x39\x8d\xee\xdf\x01\x00\x00\xff\xff\x5b\x42\x03\x3f\x27\x06\x00\x00")

func jenkins_v1alpha1_jenkinsjobYamlBytes() ([]byte, error) {
	return bindataRead(
		_jenkins_v1alpha1_jenkinsjobYaml,
		"jenkins_v1alpha1_jenkinsjob.yaml",
	)
}

func jenkins_v1alpha1_jenkinsjobYaml() (*asset, error) {
	bytes, err := jenkins_v1alpha1_jenkinsjobYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "jenkins_v1alpha1_jenkinsjob.yaml", size: 0, mode: os.FileMode(511), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"jenkins_v1alpha1_jenkinsinstance.yaml": jenkins_v1alpha1_jenkinsinstanceYaml,
	"jenkins_v1alpha1_jenkinsjob.yaml":      jenkins_v1alpha1_jenkinsjobYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"jenkins_v1alpha1_jenkinsinstance.yaml": &bintree{jenkins_v1alpha1_jenkinsinstanceYaml, map[string]*bintree{}},
	"jenkins_v1alpha1_jenkinsjob.yaml":      &bintree{jenkins_v1alpha1_jenkinsjobYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

// Code generated by go-bindata. DO NOT EDIT. @generated
// sources:
// crd/jenkins_v1alpha2_jenkinsinstance.yaml
package crddata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _jenkins_v1alpha2_jenkinsinstanceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\x4d\x73\x1b\x37\x0f\xbe\xeb\x57\x60\x9c\x43\x92\x89\x25\xbd\x4e\x2e\xef\xe8\x96\x71\x7a\x70\x3b\xcd\x64\xe2\x4c\x7a\xe8\xf4\x00\x91\x58\x09\x31\x97\x64\x49\xec\x3a\x6a\xa7\xff\xbd\x43\x72\x57\xd6\xc7\xae\xa4\xa4\xd9\x8b\x2d\x92\x00\x1e\x3c\x00\x01\x10\x3d\x7f\xa6\x10\xd9\xd9\x05\xa0\x67\xfa\x2a\x64\xd3\xaf\x38\x7b\xf8\x7f\x9c\xb1\x9b\xb7\x37\x4b\x12\xbc\x99\x3c\xb0\xd5\x0b\xb8\x6d\xa2\xb8\xfa\x23\x45\xd7\x04\x45\xef\xa8\x62\xcb\xc2\xce\x4e\x6a\x12\xd4\x28\xb8\x98\x00\xa8\x40\x98\x16\x3f\x71\x4d\x51\xb0\xf6\x0b\xb0\x8d\x31\x13\x00\x83\x4b\x32\x31\x9d\x01\x50\xce\x4a\x70\xc6\x50\x98\x8a\x73\xa6\x37\xb8\x80\xab\x9b\xd9\xff\xae\x26\x00\x16\x6b\x5a\xc0\x17\xb2\x0f\x6c\x23\xdb\x28\x68\x15\xc5\x59\xb7\xd0\xff\x75\x9e\x02\x8a\x0b\xb3\x88\x75\x6c\xec\x6a\xaa\xac\x92\xd9\x8a\x65\xdd\x2c\x67\xca\xd5\x93\xe8\x49\x25\x8b\xab\xe0\x1a\xbf\xd5\x77\xb1\x78\xc1\xd1\x61\x2e\x24\xfc\x5c\x44\xef\x3a\x48\x79\xc7\x9b\x26\xa0\x39\x86\x3b\x01\x88\xca\x79\x5a\xc0\xfb\xa4\xc6\xa3\x22\x9d\xd6\x9a\x65\xe8\x48\xec\x54\x47\x41\x69\xe2\x02\xfe\xfe\x67\x02\xd0\xa2\x61\x9d\x39\x2c\x9b\xce\x93\x7d\xfb\xe1\xee\xf3\x9b\x7b\xb5\xa6\x1a\xcb\x22\x80\x0f\x09\xbe\x70\xaf\x23\x7d\x3b\x01\xdd\xae\x01\x68\x8a\x2a\xb0\xcf\x1a\xe1\x79\x52\x55\xce\x80\x4e\x21\xa4\x08\xb2\x26\x68\xcb\x1a\x69\x88\xd9\x0c\xb8\x0a\x64\xcd\x11\x02\xf9\x40\x91\xac\x64\x48\x3b\x6a\x21\x1d\x41\x0b\x6e\xf9\x85\x94\xcc\xe0\x9e\x42\x52\x02\x71\xed\x1a\xa3\x53\x88\x5b\x0a\x02\x81\x94\x5b\x59\xfe\x6b\xab\x39\x82\xb8\x6c\xd2\xa0\x50\x94\x3d\x8d\x6c\x85\x82\x45\x93\x48\x68\xe8\x1a\xd0\x6a\xa8\x71\x03\x81\x92\x0d\x68\xec\x8e\xb6\x7c\x24\xce\xe0\x57\x17\x08\xd8\x56\x6e\x01\x6b\x11\x1f\x17\xf3\xf9\x8a\xa5\x4f\x61\xe5\xea\xba\xb1\x2c\x9b\x79\xce\x39\x5e\x36\xe2\x42\x9c\x6b\x6a\xc9\xcc\xd1\xf3\x34\xe3\xb4\x92\xd3\xbe\xd6\xcf\xb6\x91\x79\xbe\x03\x4c\x36\x29\x88\x51\x02\xdb\xd5\x76\x39\xe7\xc3\x28\xcd\xbf\xb0\xd5\xc0\x11\xb0\x13\x2b\x70\x9f\xd8\x4c\x4b\x89\x84\x8f\x3f\xdd\x7f\x82\xde\x68\x66\x7c\x9f\xe2\x4c\xee\x93\x58\x7c\xe2\x39\xf1\xc2\xb6\xa2\x50\xe2\x54\x05\x57\x67\x8d\x64\xb5\x77\x6c\x25\xff\x50\x86\xc9\xee\x73\x1c\x9b\x65\xcd\x92\x02\xfb\x67\x43\x51\x52\x38\x66\x70\x8b\xd6\x3a\x81\x25\x41\xe3\x35\x0a\xe9\x19\xdc\x59\xb8\xc5\x9a\xcc\x2d\x46\xfa\xd1\x2c\x27\x42\xe3\x34\x31\x78\x9e\xe7\xdd\xea\xb2\x7f\xb0\x90\xb3\x5d\xee\x2f\x7b\xff\x0d\xdd\x90\x7c\x4b\x74\xcd\x36\x92\x0a\x24\xfb\x1b\x23\x00\xb2\x4c\xa2\x27\xdf\x80\x78\x28\xb3\x17\xf7\xae\x3c\x80\x26\x6f\xdc\xa6\x26\x2b\xbb\xa2\x83\xd6\x0e\xbc\x48\x9f\xc2\xa8\x94\xb3\x15\xaf\x4e\x1a\x2b\x47\x9a\x90\x95\x4f\x31\x4e\x95\xd3\x94\x69\x38\x90\x1a\x63\x02\x4a\x29\xae\x78\x55\xa3\x3f\xde\x3a\x30\xe7\x42\x06\xd6\x49\xbc\x88\x2f\xa1\x76\x8d\x15\xd2\x25\xf7\x30\x17\x4b\xdd\x6d\x43\x8d\x7e\x40\xe1\x28\xc1\x4f\x50\xca\xe6\x59\x34\x3b\x50\x00\x23\xd4\x8d\x11\x9e\x1a\xb6\x04\x1b\xac\xcd\x98\x89\x93\x08\x4e\xc6\x63\x38\x61\x2e\x89\x47\x16\xcc\xe4\x5c\x9a\x6d\x64\xdb\x93\x86\xde\xb1\x4a\xff\x60\xd8\xa4\x1a\x4c\xb6\xe5\xe0\x6c\x4e\xb6\x16\x03\xe3\xd2\x50\x57\x1d\x2f\x75\x70\x15\x9c\x6b\x37\x17\xb8\x58\x0e\xee\x7b\xfa\x3d\x1e\x72\x8d\x2b\x3a\x69\xe9\xb7\x35\x4a\x9e\x13\x90\x2d\x85\x22\x90\x3a\x47\x13\x09\x2a\x17\x52\xba\xd1\x63\xdf\x72\x81\x77\xfb\xf1\xd3\xe7\x51\x52\x43\x59\xc0\xec\xd5\x62\xf6\xea\x52\x70\xde\x34\x2b\x3e\x73\xd1\xdf\x86\x80\x99\xfd\xee\x70\x82\xb6\xa4\x82\xc3\x98\xdc\xe7\xf7\xfc\x15\xaa\x07\x2e\xdf\xa9\x8b\x09\xc0\x7a\x68\xf5\x00\x48\xb1\x0f\x7c\x68\xf1\x8c\x8f\xe5\x6b\x8f\xa7\x85\xd3\x66\x3a\x81\x4e\xe3\x35\x54\xce\x18\xf7\x58\x46\x88\xca\x85\x1a\x05\x50\x76\x3b\x44\x37\x4a\xcd\xbb\x40\x29\x9e\x6b\xa7\x1e\x28\x3c\x2b\x0a\xa7\x9d\xc2\x69\x11\xfe\x76\x1f\x52\x17\xe3\x40\x03\x4c\x4d\x87\x38\x99\xf6\x1e\x1c\xed\x8c\xde\x8d\x7e\x0b\x53\xc4\xf7\x3b\x29\x85\x96\xd5\xe9\x34\xee\x1b\x42\x77\x16\x9c\x1f\xea\x04\xa7\xf2\xe0\x44\xeb\x39\x6b\x6d\xbc\xf7\x9c\x71\xb9\x9b\xc0\xbf\xd5\xde\x40\x09\x80\x73\x11\xb4\x4e\x93\x77\xe1\xa8\xee\x1c\x19\xbb\xab\xb2\xa2\x34\x55\x25\x19\x48\x42\xd7\xb9\x1e\xe4\x01\x68\xbb\x56\x6a\xdf\x80\xb6\x92\x63\x8b\x34\x65\xbe\x79\x3d\x0a\x33\xcd\xa0\x2b\x0a\x47\xfb\x9d\x8f\xf9\xd0\xa5\xbc\xf4\x65\x69\x4b\x50\x92\xfe\x41\x4d\xa9\x53\x89\x4a\xa5\x2e\x7c\x32\x09\xef\xfb\x74\x28\x67\x73\x98\x72\x11\xed\xcb\xa7\x38\x08\x8d\x85\xc6\xea\x23\xc7\x47\xa1\x45\x71\xe1\x5c\x11\xdf\xe6\x47\x39\xfb\x1d\xd9\xff\xc5\x2d\xa3\x6f\xd5\x59\xc6\xd3\x0b\x2b\x97\xe3\x40\x53\xfa\xca\x31\x0f\xd8\x2f\x5c\x00\xeb\xe4\x25\x7c\xf8\x7c\x5b\xfc\x75\xcb\xf1\x8b\x30\x92\x9f\x1d\x82\xc3\xe9\x72\x10\xc5\x5d\x95\x4d\x71\xdf\x0e\xf2\x6b\x98\xf4\x35\x3c\xa6\x6e\xc6\x11\xd2\xe0\x3d\x30\xa0\xc1\x25\x05\xe8\x68\x6b\x78\x0a\x2e\x6f\xc9\xff\x36\x07\xef\x39\x15\x49\x1a\xdf\x35\xf9\x8b\x5b\xe8\x1a\xe3\xe9\xd4\x48\x38\x09\xb8\xda\xe6\x60\xcc\xef\x9a\xb1\x4e\x3e\x62\x69\xa8\xfc\x4f\x8b\xf5\x71\xa2\xfa\xae\x07\xed\x0d\x1a\xbf\xc6\xd7\x93\x27\xd2\x50\x29\xf2\x42\xfa\xfd\xe1\xc3\xff\xea\x6a\xef\xad\x9f\x7f\x2a\x67\x35\x97\xca\x0c\xbf\xff\x31\x29\x77\x82\x74\xf7\xbe\x2e\x8b\xff\x06\x00\x00\xff\xff\xda\x3b\xc1\x01\x65\x11\x00\x00")

func jenkins_v1alpha2_jenkinsinstanceYamlBytes() ([]byte, error) {
	return bindataRead(
		_jenkins_v1alpha2_jenkinsinstanceYaml,
		"jenkins_v1alpha2_jenkinsinstance.yaml",
	)
}

func jenkins_v1alpha2_jenkinsinstanceYaml() (*asset, error) {
	bytes, err := jenkins_v1alpha2_jenkinsinstanceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "jenkins_v1alpha2_jenkinsinstance.yaml", size: 0, mode: os.FileMode(511), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"jenkins_v1alpha2_jenkinsinstance.yaml": jenkins_v1alpha2_jenkinsinstanceYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"jenkins_v1alpha2_jenkinsinstance.yaml": &bintree{jenkins_v1alpha2_jenkinsinstanceYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

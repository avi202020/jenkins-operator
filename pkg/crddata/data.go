// Code generated by go-bindata. DO NOT EDIT. @generated
// sources:
// crd/jenkins_v1alpha1_jenkinsinstance.yaml
package crddata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _jenkins_v1alpha1_jenkinsinstanceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\x4b\x73\xdb\xb6\x13\xbf\xeb\x53\xec\xf8\x7f\x48\x32\x89\xe8\xbf\x9b\x4b\x87\xb7\x8e\xd3\x83\xdb\x69\x26\x13\x67\xd2\x43\xa7\x87\x25\xb0\x94\x36\x26\x1e\x05\x96\x4c\xd4\x4e\xbf\x7b\x07\x00\x29\x4b\xb6\x48\xab\x69\x70\x91\xb8\xd8\x17\x7e\xfb\xc0\x02\x3d\x7f\xa4\x10\xd9\xd9\x1a\xd0\x33\x7d\x11\xb2\xe9\x2b\x56\x77\xdf\xc7\x8a\xdd\xe5\x70\xd5\x90\xe0\xd5\xea\x8e\xad\xae\xe1\xba\x8f\xe2\xcc\x7b\x8a\xae\x0f\x8a\xde\x50\xcb\x96\x85\x9d\x5d\x19\x12\xd4\x28\x58\xaf\x00\x54\x20\x4c\xc4\x0f\x6c\x28\x0a\x1a\x5f\x83\xed\xbb\x6e\x05\xd0\x61\x43\x5d\x4c\x3c\x00\xca\x59\x09\xae\xeb\x28\xac\xc5\xb9\x6e\x32\x58\xc3\xc5\x55\xf5\xff\x8b\x15\x80\x45\x43\x35\x7c\x22\x7b\xc7\x36\xb2\x8d\x82\x56\x51\xac\x46\xc2\xf4\xeb\x3c\x05\x14\x17\x2a\x83\xe9\x97\x75\xb5\x61\xd9\xf6\x4d\xa5\x9c\x59\x45\x4f\x2a\x59\xdb\x04\xd7\xfb\xbd\xae\xb3\x44\x8b\xfd\xd1\xd7\x72\xf8\x9f\x8a\xd8\xcd\xe8\x4a\xde\xf1\x5d\x1f\xb0\x7b\xec\xe6\x0a\x20\x2a\xe7\xa9\x86\xb7\x49\x8d\x47\x45\x3a\xd1\xfa\x26\x8c\xe0\x8d\xaa\xa3\xa0\xf4\xb1\x86\xbf\xfe\x5e\x01\x0c\xd8\xb1\xce\xd8\x95\x4d\xe7\xc9\xfe\xf0\xee\xe6\xe3\xeb\x5b\xb5\x25\x83\x85\x08\xe0\x43\x72\x5d\x78\xd2\x91\xd6\x41\x20\xf7\x34\x00\x4d\x51\x05\xf6\x59\x23\x3c\x4b\xaa\x0a\x0f\xe8\x14\x3a\x8a\x20\x5b\x82\xa1\xd0\x48\x43\xcc\x66\xc0\xb5\x20\x5b\x8e\x10\xc8\x07\x8a\x64\x25\xbb\x74\xa0\x16\x12\x0b\x5a\x70\xcd\x27\x52\x52\xc1\x2d\x85\xa4\x04\xe2\xd6\xf5\x9d\x4e\xa1\x1d\x28\x08\x04\x52\x6e\x63\xf9\xcf\xbd\xe6\x08\xe2\xb2\xc9\x0e\x85\xa2\x1c\x69\x64\x2b\x14\x2c\x76\x09\x84\x9e\x5e\x01\x5a\x0d\x06\x77\x10\x28\xd9\x80\xde\x1e\x68\xcb\x2c\xb1\x82\x5f\x5c\x20\x60\xdb\xba\x1a\xb6\x22\x3e\xd6\x97\x97\x1b\x96\x29\x75\x95\x33\xa6\xb7\x2c\xbb\xcb\x9c\x6b\xdc\xf4\xe2\x42\xbc\xd4\x34\x50\x77\x89\x9e\xd7\xd9\x4f\x2b\x39\xdd\x8d\xfe\xdf\x3e\x32\xcf\x0e\x1c\x93\x5d\x0a\x62\x94\xc0\x76\xb3\x27\xe7\x7c\x98\x85\xf9\x67\xb6\x1a\x38\x02\x8e\x62\xc5\xdd\x7b\x34\x13\x29\x81\xf0\xfe\xc7\xdb\x0f\x30\x19\xcd\x88\x1f\x43\x9c\xc1\xbd\x17\x8b\xf7\x38\x27\x5c\xd8\xb6\x14\x4a\x9c\xda\xe0\x4c\xd6\x48\x56\x7b\xc7\x56\xf2\x87\xea\x98\xec\x31\xc6\xb1\x6f\x0c\x4b\x0a\xec\x1f\x3d\x45\x49\xe1\xa8\xe0\x1a\xad\x75\x02\x0d\x41\xef\x35\x0a\xe9\x0a\x6e\x2c\x5c\xa3\xa1\xee\x1a\x23\x7d\x6b\x94\x13\xa0\x71\x9d\x10\x7c\x1a\xe7\xc3\xae\x72\xcc\x58\xc0\xd9\x93\xa7\x42\x9f\xd6\xa9\x0a\xc9\x55\xa2\x0d\xdb\x48\x2a\x90\x1c\x6f\xcc\x38\x90\x65\x12\x3c\xb9\x02\xe2\x43\x99\xa3\xb8\x8f\xed\x01\x34\xf9\xce\xed\x0c\x59\x39\x14\x3d\x69\xed\xc1\x29\xd2\x52\x18\x95\x72\xb6\xe5\xcd\xa2\xb1\xc2\xd2\x87\xac\x7c\x8d\x71\xad\x9c\xa6\x0c\xc3\x03\xa9\x39\x24\xa0\xb4\xe0\x96\x37\x06\xfd\xe3\xad\x07\xe6\x5c\xc8\x8e\x8d\x12\xcf\xe3\x0b\x30\xae\xb7\x42\xba\xe4\x1e\xe6\x66\xa9\xc7\x6d\x30\xe8\x4f\x28\x9c\x05\xf8\xde\x95\xb2\xf9\xa4\x37\x07\xae\x00\x46\x30\x7d\x27\xbc\xee\xd8\x12\xec\xd0\x74\x73\x26\x16\x3d\x58\x8c\xc7\xe9\x84\x39\x27\x1e\x59\x30\x83\x73\x6e\xb6\x91\x1d\x16\x0d\xbd\x61\x95\xfe\x60\xd8\xa5\x1e\x4c\x76\xe0\xe0\x6c\x4e\xb6\x01\x03\x63\xd3\xd1\xd8\x1d\xcf\x3d\xe0\x26\x38\x37\xec\xce\x38\x62\x61\x3c\x3e\xe9\xd7\x9c\x90\x0d\x6e\x68\xd1\xd2\xaf\x5b\x94\x3c\x1f\x20\x5b\x0a\x45\x20\xdd\x1c\x7d\x24\x68\x5d\x48\xe9\x46\x9f\xa7\x2b\x17\xf8\xf0\x3e\xbe\x5f\x1e\x25\x5d\x28\x35\x54\x2f\xeb\xea\xe5\xb9\xce\x45\x0a\x03\xab\x65\xf7\xa6\x42\x1f\x79\xc1\xf9\x53\x15\xbe\x54\x78\x0b\x2d\xe5\x49\x6b\xf3\x3d\x05\x96\xc2\x9c\x56\x9e\xa8\xfe\xad\xbd\x13\xa1\x5d\x44\x30\x1b\x72\x9a\xbc\x0b\x8f\xf2\xe9\x91\xb1\x9b\x36\x2b\x4a\xb7\x65\x92\x81\x24\xf4\x2a\xc7\x39\x5f\x6c\x7b\x5a\xc9\xe9\x13\xda\x5a\x17\x0c\x4a\x9d\xa6\x87\xd7\xdf\xcd\xba\x99\x66\x8b\x0d\x85\x47\xfb\xe3\x19\x33\xd3\xb9\xb8\x4c\xe9\xb6\x07\x28\x49\x7f\xa3\x66\x33\xaa\x44\xa5\x52\x77\x5d\x4c\xc2\xdb\x29\x1d\x0a\x6f\x0e\x53\x2e\x8e\xa9\x2c\xc4\x41\xe8\x2d\xf4\x56\x3f\x3a\xf8\x7c\xf6\x8b\x0b\x4f\x15\xe7\x3e\x3f\x0a\xef\x57\x64\xff\x27\xd7\x44\x3f\xa8\x27\x11\x4f\x93\x73\x6a\x72\x3e\xd0\x9a\xbe\x70\xcc\x83\xd3\x73\x17\xc0\x3a\x79\x01\xef\x3e\x5e\x97\xf3\xba\x66\xbe\x10\x66\xf2\x73\xf4\xe0\xe1\xd4\x70\xd2\x8b\x9b\x36\x9b\xe2\x8c\x68\x43\xe5\x75\x43\xfa\x15\x7c\x4e\x5d\x8a\x23\xa4\x81\xea\xc4\xc5\x0b\xcb\xd5\x38\xb3\x75\x7a\xba\x29\x6f\x84\xff\x36\xdf\x1c\x1d\x2a\x92\xf4\x7e\x6c\xde\xe7\x26\x87\xdf\x62\x5c\x4e\x8d\xe4\x27\x01\xb7\xfb\x1c\x8c\x79\x5e\x9d\xeb\xd0\x33\x96\xd2\x70\xca\x81\x8e\x06\xec\x75\xb1\x3e\x0f\xd4\x30\x3d\x62\x87\x2b\xec\xfc\x16\xaf\x56\xf7\xa0\xa1\x52\xe4\x85\xf4\xdb\x87\x0f\xba\x8b\x8b\xa3\x37\x5c\xfe\x54\xce\x6a\x2e\x9d\x19\x7e\xfb\x7d\x55\x6a\x82\xf4\xf8\x6e\x2a\xc4\x7f\x02\x00\x00\xff\xff\x02\x7e\x22\x3f\x35\x0f\x00\x00")

func jenkins_v1alpha1_jenkinsinstanceYamlBytes() ([]byte, error) {
	return bindataRead(
		_jenkins_v1alpha1_jenkinsinstanceYaml,
		"jenkins_v1alpha1_jenkinsinstance.yaml",
	)
}

func jenkins_v1alpha1_jenkinsinstanceYaml() (*asset, error) {
	bytes, err := jenkins_v1alpha1_jenkinsinstanceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "jenkins_v1alpha1_jenkinsinstance.yaml", size: 0, mode: os.FileMode(511), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"jenkins_v1alpha1_jenkinsinstance.yaml": jenkins_v1alpha1_jenkinsinstanceYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"jenkins_v1alpha1_jenkinsinstance.yaml": &bintree{jenkins_v1alpha1_jenkinsinstanceYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

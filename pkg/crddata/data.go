// Code generated by go-bindata. DO NOT EDIT. @generated
// sources:
// crd/jenkins_v1alpha1_jenkinsinstance.yaml
package crddata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _jenkins_v1alpha1_jenkinsinstanceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\xcd\x72\x1b\x37\x0c\xbe\xeb\x29\x30\xce\x21\xc9\xc4\x92\xea\xe6\xd2\xd1\x2d\xe3\xf4\xe0\x76\x9a\xc9\xc4\x99\xf4\xd0\xe9\x01\x22\xb1\x12\x62\x2e\xc9\x92\xd8\x75\xd4\x4e\xdf\xbd\x43\x72\x57\xd6\xcf\xae\xa4\xa4\xd9\x8b\x2d\x10\xbf\x1f\x40\x00\x44\xcf\x9f\x28\x44\x76\x76\x01\xe8\x99\xbe\x08\xd9\xf4\x2b\xce\x1e\x7e\x8a\x33\x76\xf3\xf6\x66\x49\x82\x37\x93\x07\xb6\x7a\x01\xb7\x4d\x14\x57\x7f\xa0\xe8\x9a\xa0\xe8\x2d\x55\x6c\x59\xd8\xd9\x49\x4d\x82\x1a\x05\x17\x13\x00\x15\x08\x13\xf1\x23\xd7\x14\x05\x6b\xbf\x00\xdb\x18\x33\x01\x30\xb8\x24\x13\x13\x0f\x80\x72\x56\x82\x33\x86\xc2\x54\x9c\x33\xbd\xc1\x05\x5c\xdd\xcc\x7e\xb8\x9a\x00\x58\xac\x69\x01\x9f\xc9\x3e\xb0\x8d\x6c\xa3\xa0\x55\x14\x67\x1d\xa1\xff\xeb\x3c\x05\x14\x17\x66\x35\xa6\xbf\xac\x67\x2b\x96\x75\xb3\x9c\x29\x57\x4f\xa2\x27\x95\xac\xad\x82\x6b\xfc\x56\xd7\x45\xa2\xc5\x7e\xe7\x6b\x09\xfe\x97\x22\x76\xd7\xb9\x92\x4f\xbc\x69\x02\x9a\x63\x37\x27\x00\x51\x39\x4f\x0b\x78\x97\xd4\x78\x54\xa4\x13\xad\x59\x86\x0e\xbc\x4e\x75\x14\x94\x26\x2e\xe0\x9f\x7f\x27\x00\x2d\x1a\xd6\x19\xbb\x72\xe8\x3c\xd9\x37\xef\xef\x3e\xbd\xbe\x57\x6b\xaa\xb1\x10\x01\x7c\x48\xae\x0b\xf7\x3a\xd2\xb7\x93\xc8\x2d\x0d\x40\x53\x54\x81\x7d\xd6\x08\xcf\x93\xaa\xc2\x03\x3a\xa5\x8e\x22\xc8\x9a\xa0\x2d\x34\xd2\x10\xb3\x19\x70\x15\xc8\x9a\x23\x04\xf2\x81\x22\x59\xc9\x2e\xed\xa8\x85\xc4\x82\x16\xdc\xf2\x33\x29\x99\xc1\x3d\x85\xa4\x04\xe2\xda\x35\x46\xa7\xd4\xb6\x14\x04\x02\x29\xb7\xb2\xfc\xf7\x56\x73\x04\x71\xd9\xa4\x41\xa1\x28\x7b\x1a\xd9\x0a\x05\x8b\x26\x81\xd0\xd0\x35\xa0\xd5\x50\xe3\x06\x02\x25\x1b\xd0\xd8\x1d\x6d\x99\x25\xce\xe0\x37\x17\x08\xd8\x56\x6e\x01\x6b\x11\x1f\x17\xf3\xf9\x8a\xa5\x2f\x5d\xe5\xea\xba\xb1\x2c\x9b\x79\xae\x35\x5e\x36\xe2\x42\x9c\x6b\x6a\xc9\xcc\xd1\xf3\x34\xfb\x69\x25\x97\x7b\xad\x9f\x6d\x33\xf3\x7c\xc7\x31\xd9\xa4\x24\x46\x09\x6c\x57\x5b\x72\xae\x87\x51\x98\x7f\x65\xab\x81\x23\x60\x27\x56\xdc\x7d\x42\x33\x91\x12\x08\x1f\x7e\xbe\xff\x08\xbd\xd1\x8c\xf8\x3e\xc4\x19\xdc\x27\xb1\xf8\x84\x73\xc2\x85\x6d\x45\xa1\xe4\xa9\x0a\xae\xce\x1a\xc9\x6a\xef\xd8\x4a\xfe\xa1\x0c\x93\xdd\xc7\x38\x36\xcb\x9a\x25\x25\xf6\xaf\x86\xa2\xa4\x74\xcc\xe0\x16\xad\x75\x02\x4b\x82\xc6\x6b\x14\xd2\x33\xb8\xb3\x70\x8b\x35\x99\x5b\x8c\xf4\xbd\x51\x4e\x80\xc6\x69\x42\xf0\x3c\xce\xbb\x5d\x65\x9f\xb1\x80\xb3\x25\xf7\x17\xbd\xff\x86\x6e\x48\xbe\x25\xba\x66\x1b\x49\x05\x92\xfd\x83\x11\x07\xb2\x4c\x82\x27\xdf\x80\x78\x28\xb3\x97\xf7\xae\x3d\x80\x26\x6f\xdc\xa6\x26\x2b\xbb\xa2\x83\xd6\x0e\xa2\x48\x9f\xc2\xa8\x94\xb3\x15\xaf\x4e\x1a\x2b\x2c\x4d\xc8\xca\xa7\x18\xa7\xca\x69\xca\x30\x1c\x48\x8d\x21\x01\xa5\x05\x57\xbc\xaa\xd1\x1f\x1f\x1d\x98\x73\x21\x3b\xd6\x49\xbc\x88\x2f\xa1\x76\x8d\x15\xd2\xa5\xf6\x30\x37\x4b\xdd\x1d\x43\x8d\x7e\x40\xe1\x28\xc0\x4f\xae\x94\xc3\xb3\xde\xec\xb8\x02\x18\xa1\x6e\x8c\xf0\xd4\xb0\x25\xd8\x60\x6d\xc6\x4c\x9c\xf4\xe0\x64\x3e\x86\x0b\xe6\x92\x7c\x64\xc1\x0c\xce\xa5\xd5\x46\xb6\x3d\x69\xe8\x2d\xab\xf4\x0f\x86\x4d\xea\xc1\x64\x5b\x0e\xce\xe6\x62\x6b\x31\x30\x2e\x0d\x75\xdd\xf1\xd2\x00\x57\xc1\xb9\x76\x73\x41\x88\x85\x71\x3f\xd2\x6f\x89\x90\x6b\x5c\xd1\x49\x4b\xbf\xaf\x51\xf2\x7e\x80\x6c\x29\x14\x81\x34\x39\x9a\x48\x50\xb9\x90\xca\x8d\x1e\xfb\x91\x0b\xbc\x3b\x8f\x9f\x3e\x8f\x92\x06\xca\x02\x66\xaf\x16\xb3\x57\x97\x3a\xe7\x4d\xb3\xe2\x33\x17\xfd\x4d\x08\x98\xd1\xef\x98\x93\x6b\x4b\x2a\x7e\x18\x93\xe7\xfc\x5e\xbc\x42\xf5\xc0\xe5\x3b\x75\x31\x01\x58\x0f\x51\x0f\x1c\x29\xf6\x81\x0f\x2d\x9e\x89\xb1\x7c\xed\xf1\xb6\x70\xda\x4c\x27\xd0\x69\xbc\x86\xca\x19\xe3\x1e\xcb\x0a\x51\xb9\x50\xa3\x00\xca\xee\x84\xe8\x56\xa9\x79\x97\x28\xc5\x73\xed\xd4\x03\x85\x67\x45\xe1\xb4\x53\x38\x2d\xc2\x5f\x1f\x43\x9a\x62\x1c\x68\x00\xa9\xe9\x10\x26\xd3\x3e\x82\xa3\x93\xd1\xbb\xd1\x1f\x61\xca\xf8\xfe\x24\xa5\xd0\xb2\x3a\x5d\xc6\xfd\x40\xe8\x78\xc1\xf9\xa1\x49\x70\xaa\x0e\x4e\x8c\x9e\xb3\xd6\xc6\x67\xcf\x99\x90\xbb\xcd\xfb\x6b\xed\x0d\xb4\x00\x38\x97\x41\xeb\x34\x79\x17\x8e\xfa\xce\x91\xb1\xbb\x2a\x2b\x4a\x5b\x55\x92\x81\x24\x74\x9d\xfb\x41\x5e\x80\xb6\xb4\xd2\xfb\x06\xb4\x95\x1a\x5b\xa4\x2d\xf3\xf5\x8f\xa3\x6e\xa6\x1d\x74\x45\xe1\xe8\xbc\x8b\x31\x33\x5d\x8a\x4b\xdf\x96\xb6\x00\x25\xe9\xef\x34\x94\x3a\x95\xa8\x54\x9a\xc2\x27\x8b\xf0\xbe\x2f\x87\xc2\x9b\xd3\x94\x9b\x68\xdf\x3e\xc5\x41\x68\x2c\x34\x56\x1f\x05\x3e\xea\x5a\x14\x17\xce\x35\xf1\x6d\x7d\x14\xde\x6f\xa8\xfe\xcf\x6e\x19\x7d\xab\xce\x22\x9e\x5e\x58\xb9\x1d\x07\x9a\xd2\x17\x8e\x79\xc1\x7e\xe1\x02\x58\x27\x2f\xe1\xfd\xa7\xdb\x12\xaf\x5b\x8e\x5f\x84\x91\xfa\xec\x3c\x38\xdc\x2e\x07\xbd\xb8\xab\xb2\x29\xee\xc7\x41\x7e\x05\x93\xbe\x86\xc7\x34\xcd\x38\x42\x5a\xbc\x07\x16\x34\xb8\xa4\x01\x1d\x1d\x0d\x6f\xc1\xe5\x2d\xf9\xff\xf6\xe0\xbd\xa0\x22\x49\xe3\xbb\x21\x7f\xf1\x08\x5d\x63\x3c\x5d\x1a\xc9\x4f\x02\xae\xb6\x35\x18\xf3\xbb\x66\x6c\x92\x8f\x58\x1a\x6a\xff\xd3\x62\x7d\x1c\xa8\x7e\xea\x41\x7b\x83\xc6\xaf\xf1\x66\xf2\x04\x1a\x2a\x45\x5e\x48\xbf\x3b\x7c\xf8\x5f\x5d\xed\xbd\xf5\xf3\x4f\xe5\xac\xe6\xd2\x99\xe1\x8f\x3f\x27\xe5\x4e\x90\xee\xde\xd7\x85\xf8\x5f\x00\x00\x00\xff\xff\x36\x64\xd8\x93\x5d\x11\x00\x00")

func jenkins_v1alpha1_jenkinsinstanceYamlBytes() ([]byte, error) {
	return bindataRead(
		_jenkins_v1alpha1_jenkinsinstanceYaml,
		"jenkins_v1alpha1_jenkinsinstance.yaml",
	)
}

func jenkins_v1alpha1_jenkinsinstanceYaml() (*asset, error) {
	bytes, err := jenkins_v1alpha1_jenkinsinstanceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "jenkins_v1alpha1_jenkinsinstance.yaml", size: 0, mode: os.FileMode(511), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"jenkins_v1alpha1_jenkinsinstance.yaml": jenkins_v1alpha1_jenkinsinstanceYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"jenkins_v1alpha1_jenkinsinstance.yaml": &bintree{jenkins_v1alpha1_jenkinsinstanceYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

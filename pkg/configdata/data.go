// Code generated by go-bindata. DO NOT EDIT. @generated
// sources:
// pkg/configdata/environment/jenkins-jvm-environment
// pkg/configdata/environment/required-plugins
package configdata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _environmentJenkinsJvmEnvironment = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xf2\x72\x0c\x73\x8c\xf7\x0f\x08\x09\xb6\xd2\x8d\xc8\x2d\x36\x34\x30\x32\xc9\x55\xd0\x8d\xc8\xad\x80\xb2\x5c\xb2\x52\xf3\xb2\x33\xf3\x8a\xf5\x32\xf3\x8a\x4b\x12\x73\x72\xf4\x8a\x4a\xf3\x82\x53\x4b\x4a\x0b\xc2\x33\xab\x12\x8b\x52\x6c\xd3\x12\x73\x8a\x53\x91\x94\x39\xfb\x78\xea\xa5\x64\x16\x27\x26\xe5\xa4\xa6\xd8\x96\x14\x95\xa6\x72\x79\xb9\xfa\x79\x7b\xfa\x05\x43\xed\xd0\x4d\x2c\x4a\x2f\xcd\x4d\xcd\x2b\x29\x0e\x4a\x4d\xcc\xc9\xd5\x2b\x48\x2c\x2e\x2e\x4f\xd1\x53\xd1\x70\x74\xf1\xf5\xf4\x8b\x0f\x0d\x76\x0d\xd2\xb4\x85\xf1\x02\x1c\x83\x83\xc3\xfd\x83\x5c\x34\x15\x30\xf4\x15\xe5\xe7\xa4\x16\xe3\xd0\x06\xe6\x01\x02\x00\x00\xff\xff\xca\x81\xb8\xf8\xd8\x00\x00\x00")

func environmentJenkinsJvmEnvironmentBytes() ([]byte, error) {
	return bindataRead(
		_environmentJenkinsJvmEnvironment,
		"environment/jenkins-jvm-environment",
	)
}

func environmentJenkinsJvmEnvironment() (*asset, error) {
	bytes, err := environmentJenkinsJvmEnvironmentBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "environment/jenkins-jvm-environment", size: 0, mode: os.FileMode(511), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _environmentRequiredPlugins = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xcc\xc1\x0d\xc3\x30\x08\x46\xe1\x7b\x77\x61\x81\x6e\x43\x6c\xe2\x92\x20\xff\x16\x06\x45\xea\xf4\x3d\x71\xed\xf1\xe9\x93\x5e\x73\xe9\x32\x43\xd9\xf6\xdb\x38\x64\xc7\xeb\x48\xb5\x4e\x87\xa1\xdd\xe2\xb4\x2c\x87\xce\xb2\x0b\x07\xf5\x6d\x95\x9c\xf1\x81\xeb\x57\x68\x39\x2e\x69\x51\xf0\xc0\xef\xd3\xf0\x10\x8f\xe1\x32\x38\xe0\x45\x0d\xf3\xd4\x91\xce\xa1\x98\xc4\x9b\x1a\xba\xfc\x45\xda\xb9\x16\xbc\xe6\xbf\x00\x00\x00\xff\xff\xff\xff\x9a\x03\xb3\x00\x00\x00")

func environmentRequiredPluginsBytes() ([]byte, error) {
	return bindataRead(
		_environmentRequiredPlugins,
		"environment/required-plugins",
	)
}

func environmentRequiredPlugins() (*asset, error) {
	bytes, err := environmentRequiredPluginsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "environment/required-plugins", size: 0, mode: os.FileMode(511), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"environment/jenkins-jvm-environment": environmentJenkinsJvmEnvironment,
	"environment/required-plugins":        environmentRequiredPlugins,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"environment": &bintree{nil, map[string]*bintree{
		"jenkins-jvm-environment": &bintree{environmentJenkinsJvmEnvironment, map[string]*bintree{}},
		"required-plugins":        &bintree{environmentRequiredPlugins, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
